---

- name: ansible-orchestration | csi-volume | install csi driver
  ansible.builtin.include_role:
    name: tcharl.ansible_orchestration_cli
    apply:
      delegate_to: "{{ groups['kube_master'][0] }}"
  vars:
    ansible_become: true
    standalone_role: False
    kube_sysadmin_client_cert_path: "{{ kube_credential_folder }}/kubeadm.crt"
    kube_sysadmin_client_key_path: "{{ kube_credential_folder }}/kubeadm.pem"
    kube_cacert_path: "{{ kubernetes_certificates_path }}ca.crt"
    skip_master_check: Yes
    helm_install: False
    descriptor_sets:
      - url: https://github.com/kubevirt/hostpath-provisioner-operator.git
        kind: git
        branch: master
        descriptors:
          - path: deploy/namespace.yaml
            namespace: hostpath-provisioner
          - path: deploy/operator.yaml
            namespace: hostpath-provisioner
          - path: deploy/storageclass-immediate.yaml
            namespace: hostpath-provisioner
          - path: deploy/storageclass-wffc-csi.yaml
            namespace: hostpath-provisioner
          #- path: deploy/storageclass-wffc.yaml
          #  namespace: hostpath-provisioner

- name: ansible-orchestration | csi-volume | create temp directory to host template
  changed_when: false
  ansible.builtin.tempfile:
    state: directory
    suffix: csi
  delegate_to: "{{ groups['kube_master'][0] }}"
  register: csi_provisionner_temp_directory

- name: ansible-orchestration | csi-volume | deduce host path
  debug:
    msg: "{{ nfs_mountpoints | default([]) | map(attribute='mountpoints') | flatten | selectattr('csi_mount', 'defined') | selectattr('csi_mount', 'equalto', true) | map(attribute='local') | first }}"
  register: csi_provisionner_host_path

- name: ansible-orchestration | csi-volume | create csi provisionner configuration
  ansible.builtin.template:
    src: hostpath-csi.yml.j2
    dest: "{{ csi_provisionner_temp_directory.path }}/hostpath-csi.yml"
    mode: '0600'
  delegate_to: "{{ groups['kube_master'][0] }}"

- name: ansible-orchestration | csi-volume | execute kubectl apply
  kubernetes.core.k8s:
    state: present
    src: "{{ csi_provisionner_temp_directory.path }}/hostpath-csi.yml"
    ca_cert: "{{ kube_cacert_path | default(omit) }}"
    client_cert: "{{ kube_sysadmin_client_cert_path | default(omit) }}"
    client_key: "{{ kube_sysadmin_client_key_path | default(omit) }}"
    kubeconfig: "{{ kube_config_path }}"
    context: "{{ kube_context | default('kubernetes-admin@kubernetes') }}"
  delegate_to: "{{ groups['kube_master'][0] }}"
  become: true