---

- name: Delete-configuration | stop kubelet service
  ansible.builtin.service:
    name: "{{ item }}"
    state: stopped
  failed_when: false
  with_items:
    - kubelet
    - containerd
  become: Yes

- name: Delete-configuration | list files
  ansible.builtin.find:
    paths: "/var/lib/kubelet/pods"
    follow: yes
    file_type: directory
    recurse: false
  register: pod_data_folder_content
  become: Yes

- name: Delete-configuration | debug found folders to destroy
  ansible.builtin.debug:
    msg: "{{ pod_data_folder_content }}"
    verbosity: 3

- name: Delete-configuration | iterating over the pods
  ansible.builtin.include_tasks: destroy-kubelet-volumes.yml
  loop: "{{ pod_data_folder_content.files | map(attribute='path') }}"
  loop_control:
    loop_var: pod_files

- name: Delete-configuration | remove unwanted packages
  ansible.builtin.package:
    name:
     - kubeadm
     - kubectl
     - kubelet
     - kubernetes-cni
     - kubernetes-client
     - kubernetes-ansible
     - kubernetes-node
     - kubernetes-master
    state: absent
  become: Yes

#- name: ansible-orchestration | kube-destroy | Get a list of all running containers
#  community.docker.docker_host_info:
#    containers: True
#  become: Yes
#  register: docker_info

#- name: ansible-orchestration | kube-destroy | Debug a list of all running containers
#  ansible.builtin.debug:
#    msg: "{{ docker_info.containers }}"

#- name: ansible-orchestration | kube-destroy | Stop all running containers
#  community.docker.docker_container:
#    name: '{{ item.Names[0] | regex_replace("^/", "") }}'
#    state: absent
#  become: Yes
#  loop: '{{ docker_info.containers }}'

#- name: ansible-orchestration | kube-destroy | Prune everything
#  community.docker.docker_prune:
#    containers: yes
#    images: yes
#    networks: yes
#    volumes: yes
#    builder_cache: yes
#  become: Yes

- name: Delete-configuration | remove kubernetes configuration folder
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
    recurse: yes
  become: Yes
  loop:
    - /etc/cni
    - /etc/kubernetes
    - /etc/sysconfig/kubelet
    - /etc/systemd/system/multi-user.target.wants/kubelet.service
    - /root/.kube
    - /usr/lib/etcd
    - /usr/lib/kubelet
    - /usr/lib/systemd/system/kubelet.service
    - /usr/lib/systemd/system/kubelet.service.d
    - /var/lib/etcd
    - /var/lib/cni
    - /var/lib/kubelet
  failed_when: false
  notify: ansible-orchestration | refresh containerd

- name: Delete-configuration | Just force systemd to reread configs (2.4 and above)
  ansible.builtin.systemd:
    daemon_reload: yes
  become: Yes

- name: Delete-configuration | restart-firewall
  ansible.builtin.service:
    name: firewalld
    state: restarted
  become: yes

- name: Delete-configuration | start containerd service
  ansible.builtin.service:
    name: "{{ item }}"
    state: started
  failed_when: false
  with_items:
    - containerd
  become: Yes
