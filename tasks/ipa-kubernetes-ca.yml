---

- name: Ipa-kubernetes-ca | check if kube generic ca exists
  ansible.builtin.shell: |
    set -o pipefail && echo '{{ company_realm_password }}' | kinit admin > /dev/null
    ipa ca-find | grep -c ': kubernetes-ca'
  register: ipa_kubernetes_ca_exists
  delegate_to: "{{ groups[idm_group][0] }}"
  no_log: "{{ secure_logs }}"
  failed_when: False
  changed_when: False
  become: true

- name: Ipa-kubernetes-ca | create ip lightweight ca
  ansible.builtin.shell: |
    set -o pipefail && echo '{{ company_realm_password }}' | kinit admin  > /dev/null
    ipa ca-add kubernetes-ca --subject "CN=kubernetes-ca,O={{ company_domain | upper }}"
  when:
   - not ipa_kubernetes_ca_exists.stdout == '1'
  delegate_to: "{{ groups[idm_group][0] }}"
  no_log: "{{ secure_logs }}"
  changed_when: False
  become: true

- name: Ipa-kubernetes-ca | check if kube ca accl exists
  ansible.builtin.shell: |
    set -o pipefail && echo '{{ company_realm_password }}' | kinit admin > /dev/null
    ipa caacl-find | grep -c ': kubernetes-ca-acl'
  register: ipa_kubernetes_ca_acl_exists
  delegate_to: "{{ groups[idm_group][0] }}"
  no_log: "{{ secure_logs }}"
  failed_when: False
  changed_when: False
  become: true

- name: Ipa-kubernetes-ca | create kube admin ca access list category
  ansible.builtin.shell: |
    set -o pipefail && echo '{{ company_realm_password }}' | kinit admin > /dev/null
    ipa caacl-add kubernetes-ca-acl --hostcat=all --servicecat=all --usercat=all
  when: #TODO create hostcat and servicecat for better control
   - not ipa_kubernetes_ca_acl_exists.stdout == '1'
  no_log: "{{ secure_logs }}"
  delegate_to: "{{ groups[idm_group][0] }}"
  changed_when: False
  become: true

- name: Ipa-kubernetes-ca | add kube-ca to ca-acl
  ansible.builtin.shell: |
    set -o pipefail && echo '{{ company_realm_password }}' | kinit admin
    ipa caacl-add-ca kubernetes-ca-acl --ca kubernetes-ca
  when:
   - not ipa_kubernetes_ca_acl_exists.stdout == '1'
  no_log: "{{ secure_logs }}"
  delegate_to: "{{ groups[idm_group][0] }}"
  changed_when: False
  become: true

- name: Ipa-kubernetes-ca | check if kube ca group exists
  ansible.builtin.shell: |
    set -o pipefail && echo '{{ company_realm_password }}' | kinit admin > /dev/null
    ipa group-find | grep -c ': kubernetes-administrators'
  register: ipa_group_kubeadm_exists
  delegate_to: "{{ groups[idm_group][0] }}"
  no_log: "{{ secure_logs }}"
  failed_when: False
  changed_when: False
  become: true

- name: Ipa-kubernetes-ca | create ipa administrators
  freeipa.ansible_freeipa.ipagroup:
    ipaadmin_password: "{{ company_realm_password }}"
    name: "kubernetes-administrators"
  delegate_to: "{{ groups[idm_group][0] }}"
  no_log: "{{ secure_logs }}"
  when:
   - not ipa_group_kubeadm_exists.stdout == '1'

#- name: ansible-orchestration | ipa-kubernetes-ca | create the kubernetes ca-acl
#  shell: |
#    set -o pipefail && echo '{{ company_realm_password }}' | kinit admin > /dev/null
#    ipa caacl-add-user kubernetes-ca-acl --groups=kubernetes-administrators
#  when:
#   - not ipa_kubernetes_ca_acl_exists.stdout == '1'
#   - not ipa_group_kubeadm_exists.stdout == '1'
#  no_log: "{{ secure_logs }}"
#  delegate_to: "{{ groups[idm_group][0] }}"
#  changed_when: False
#  become: true

- name: Ipa-kubernetes-ca | check if kube ca group exists
  ansible.builtin.shell: |
    set -o pipefail && echo '{{ company_realm_password }}' | kinit admin > /dev/null
    ipa certprofile-find | grep -c ': kubeAdministrators'
  register: ipa_certprofile_kubeadm_exists
  delegate_to: "{{ groups[idm_group][0] }}"
  no_log: "{{ secure_logs }}"
  failed_when: False
  changed_when: False
  become: true

- name: Ipa-kubernetes-ca | get the ipa default ca profile
  ansible.builtin.shell: |
    set -o pipefail && echo '{{ company_realm_password }}' | kinit admin > /dev/null
    ipa certprofile-show --out /tmp/ipa_default_ca_profile.cfg caIPAserviceCert
  when:
   - not ipa_certprofile_kubeadm_exists.stdout == '1'
  no_log: "{{ secure_logs }}"
  delegate_to: "{{ groups[idm_group][0] }}"
  changed_when: False
  become: true

- name: Ipa-kubernetes-ca | replace the ipa ca default profile id with the kubeadmin one
  ansible.builtin.lineinfile:
    path: /tmp/ipa_default_ca_profile.cfg
    regexp: '^profileId='
    line: profileId=kubeAdministrators
  when:
   - not ipa_certprofile_kubeadm_exists.stdout == '1'
  no_log: "{{ secure_logs }}"
  delegate_to: "{{ groups[idm_group][0] }}"
  changed_when: False
  become: true

- name: Ipa-kubernetes-ca | set the profile visible
  ansible.builtin.lineinfile:
    path: /tmp/ipa_default_ca_profile.cfg
    regexp: '^visible='
    line: visible=true
  when:
   - not ipa_certprofile_kubeadm_exists.stdout == '1'
  no_log: "{{ secure_logs }}"
  delegate_to: "{{ groups[idm_group][0] }}"
  changed_when: False
  become: true

- name: Ipa-kubernetes-ca | adapt the csr organization from csr
  ansible.builtin.lineinfile:
    path: /tmp/ipa_default_ca_profile.cfg
    regexp: "{{ 'policyset.serverCertSet.1.default.params.name' | regex_escape() }}.*"
    line: policyset.serverCertSet.1.default.params.name=CN=$request.req_subject_name.cn$, O=system:masters
  when:
   - not ipa_certprofile_kubeadm_exists.stdout == '1'
  no_log: "{{ secure_logs }}"
  delegate_to: "{{ groups[idm_group][0] }}"
  changed_when: False
  become: true

- name: Ipa-kubernetes-ca | import the according kubernetes admin profile
  ansible.builtin.shell: |
    set -o pipefail && echo '{{ company_realm_password }}' | kinit admin > /dev/null
    ipa certprofile-import kubeAdministrators --file /tmp/ipa_default_ca_profile.cfg --desc "Kubernetes administration certificates" --store TRUE
  when:
   - not ipa_certprofile_kubeadm_exists.stdout == '1'
  no_log: "{{ secure_logs }}"
  delegate_to: "{{ groups[idm_group][0] }}"
  changed_when: False
  become: true

- name: Ipa-kubernetes-ca | peer ca kubeAdm profile to ca
  ansible.builtin.shell: |
    set -o pipefail && echo '{{ company_realm_password }}' | kinit admin > /dev/null
    ipa caacl-add-profile kubernetes-ca-acl --certprofile kubeAdministrators
  when:
   - not ipa_certprofile_kubeadm_exists.stdout == '1'
  no_log: "{{ secure_logs }}"
  delegate_to: "{{ groups[idm_group][0] }}"
  changed_when: False
  become: true
