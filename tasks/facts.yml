---

- name: Facts | retrieve current machine ip
  ansible.builtin.setup:
    gather_subset:
      - network
  register: current_host_facts
  delegate_facts: true

- name: Facts | compute ip if preferred_nic is not set
  ansible.builtin.debug:
    msg: "{{ current_host_facts.ansible_facts['ansible_' + preferred_nic | replace('-', '_')].ipv4.address if preferred_nic is defined else current_host_facts.ansible_facts.ansible_default_ipv4.address | default(current_host_facts.ansible_facts.ansible_all_ipv4_addresses[0]) }}"
  register: current_host_ip

- name: Facts | get current hostname
  ansible.builtin.command: "hostname"
  register: kube_machine_hostname
  changed_when: false

- name: Facts | gather facts on kube master machine
  ansible.builtin.setup:
    gather_subset:
      - network
  delegate_to: "{{ groups[kube_masters_group][0] }}"
  register: masterfacts

- name: Facts | get master facts
  ansible.builtin.debug:
    var: masterfacts
    verbosity: 3

- name: Facts | compute master ip if preferred_nic is not set
  ansible.builtin.debug:
    msg: "{{ masterfacts.ansible_facts['ansible_' + master_preferred_nic | replace('-', '_')].ipv4.address if master_preferred_nic is defined else masterfacts.ansible_facts.ansible_default_ipv4.address | default(masterfacts.ansible_facts.ansible_all_ipv4_addresses[0]) }}"
  register: kube_master_ip

- name: Facts | compute master network if preferred_nic is not set
  ansible.builtin.debug:
    msg: "{{ kube_cluster_subnet if kube_cluster_subnet is defined else (masterfacts.ansible_facts['ansible_' + master_preferred_nic | replace('-', '_')].ipv4.network | ansible.utils.ipsubnet(masterfacts.ansible_facts['ansible_' + master_preferred_nic].ipv4.prefix)) if master_preferred_nic is defined else ((masterfacts.ansible_facts.ansible_default_ipv4.network | default(masterfacts.ansible_facts.ansible_all_ipv4_addresses[0])) | ansible.utils.ipsubnet(24)) }}"
  register: kube_network

- name: Facts | gather facts on idm machine
  ansible.builtin.setup:
    gather_subset:
      - network
  delegate_to: "{{ groups[idm_group][0] }}"
  register: idmfacts

- name: Facts | get idm facts
  ansible.builtin.debug:
    var: idmfacts
    verbosity: 3

- name: Facts | compute idm ip if preferred_nic is not set
  ansible.builtin.debug:
    msg: "{{ idmfacts.ansible_facts['ansible_' + idm_preferred_nic | replace('-', '_')].ipv4.address if idm_preferred_nic is defined and not idm_preferred_nic.skipped is defined else idmfacts.ansible_facts.ansible_default_ipv4.address | default(idmfacts.ansible_facts.ansible_all_ipv4_addresses[0]) }}"
  register: idm_ip
