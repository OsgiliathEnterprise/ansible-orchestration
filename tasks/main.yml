---
# tasks file for ansible-orchestration

- name: ansible-orchestration | role dependencies
  ansible.builtin.include_tasks: deps.yml
  when: standalone_role

- name: ansible-orchestration | role dependencies
  ansible.builtin.include_tasks: prereq.yml

- name: ansible-orchestration | gather facts on newly created machines
  setup:
  delegate_facts: true
  delegate_to: "{{ groups['kube_master'][0] }}"
  register: masterfacts

- name: ansible-orchestration | get master facts
  debug:
    var: masterfacts
    verbosity: 3

- name: ansible-orchestration | include firewalld role for masters
  include_role:
    name: tcharl.ansible_routing
  vars:
    firewalld_zones:
      - name: "{{ kube_firewall_zone }}"
        enabled_service:
          - service: "ssh"
          - service: "http"
          - service: "https"
        enabled_ports:
          - port: 6443
            protocol: tcp
          - port: 2379
            protocol: tcp
          - port: 2380
            protocol: tcp
          - port: 10250
            protocol: tcp
          - port: 10251
            protocol: tcp
          - port: 10252
            protocol: tcp
  when: kube_masters_group in group_names

- name: ansible-orchestration | include firewalld role for nodes
  include_role:
    name: tcharl.ansible_routing
  vars:
    firewalld_zones:
      - name: "{{ kube_firewall_zone }}"
        enabled_service:
          - service: "ssh"
        enabled_ports:
          - port: 10250
            protocol: tcp
        enabled_port_ranges:
          - port_range: "30000-32767"
            protocol: tcp
  when: kube_nodes_group in group_names

- name: ansible-orchestration | delegate kubernetes ca creation to IPA
  include_tasks: kube-destroy.yml
  when:
   - reset_kube

# - name: ansible-orchestration | delegate kubernetes ca creation to IPA
#  include_tasks: ipa-certs.yml
#  when:
#   - kube_masters_group in group_names

- name: ansible-orchestration | create kubernetes directory
  file:
    path: "/etc/kubernetes"
    state: directory
    owner: root
    group: root
    mode: 0755
  become: True

- name: ansible-orchestration | compute kubernetes node group
  debug:
    msg: "{{ 'master' if kube_masters_group in group_names else ('node' if kube_nodes_group in group_names) }}"
  register: kube_node_group
  when: (kube_masters_group in group_names) or (kube_nodes_group in group_names)

- name: ansible-orchestration | ensure swap disabled
  command: "swapoff --all"
  changed_when: False
  become: true

- name: ansible-orchestration | compute ip if preferred_nic is not set
  ansible.builtin.debug:
    msg: "{{ masterfacts.ansible_facts['ansible_' + preferred_nic].ipv4.address if preferred_nic is defined else masterfacts.ansible_facts.ansible_default_ipv4.address | default(masterfacts.ansible_facts.ansible_all_ipv4_addresses[0]) }}"
  register: targethostfacts_ip

- name: ansible-orchestration | include kubernetes role
  include_role:
    name: geerlingguy.kubernetes
  when: (kube_masters_group in group_names) or (kube_nodes_group in group_names)
  vars:
    ansible_become: true
    kubernetes_apiserver_advertise_address: "{{ targethostfacts_ip.msg | ansible.netcommon.ipaddr }}"
    kubernetes_pod_network:
      cni: 'flannel'
      cidr: "{{ kube_cidr }}"
    kubernetes_ignore_preflight_errors: "Firewalld,SystemVerification"
    kubernetes_role: "{{ kube_node_group.msg }}"
    kubernetes_config_cluster_configuration:
      networking:
        podSubnet: "{{ kubernetes_pod_network.cidr }}"
      kubernetesVersion: "{{ kubernetes_version_kubeadm }}"
      apiServer:
        certSANs: "{{ kube_alt_names | default(['api.kubernetes.' + company_domain]) }}"
        extraArgs:
          authorization-mode: Node,RBAC
        timeoutForControlPlane: 4m0s
    kubernetes_config_kubelet_configuration:
      cgroupDriver: systemd

- name: ansible-orchestration | create admin user
  ansible.builtin.import_tasks: admin-user.yml
