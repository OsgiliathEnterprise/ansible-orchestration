---
- name: ansible-orchestration | admin-user | create a kube credential folder
  ansible.builtin.file:
    state: directory
    dest: "{{ kube_credential_folder }}"
    mode: "0755"
    owner: "root"
    group: "root"
  when:
   - kube_masters_group in group_names
  become: true

- name: ansible-orchestration | admin-user | create a kube credential key and store into the first datastore mountpoint
  community.crypto.openssl_privatekey:
    path: "{{ kube_credential_folder }}/kubeadm.pem"
  when:
   - kube_masters_group in group_names
   - not kube_credential_key is defined
  become: true

- name: ansible-orchestration | admin-user | create a kube credential key and store into the first datastore mountpoint
  ansible.builtin.copy:
    dest: "{{ kube_credential_folder }}/kubeadm.pem"
    content: "{{ kube_credential_key }}"
    user: "root"
    group: "root"
    mode: 0600
  when:
   - kube_masters_group in group_names
   - kube_credential_key is defined
  become: true

- name: ansible-orchestration | admin-user | Generate an OpenSSL Certificate Signing Request with Subject information
  community.crypto.openssl_csr:
    path: "{{ kube_credential_folder }}/kubeadm.csr"
    privatekey_path: "{{ kube_credential_folder }}/kubeadm.pem"
    country_name: "{{ kube_credential_country_name }}"
    organization_name: "clusterAdministrators"
    email_address: "{{ kube_credential_email_address }}"
    common_name: "kubeClusteradm"
    subject_alt_name: "{{ ['DNS:' + (hostname | default(kube_machine_hostname.stdout)), 'IP:' + current_host_ip.msg] + (kube_alt_names | default([]) | map('regex_replace', '^', 'DNS:') | unique) }}"
  when:
   - kube_masters_group in group_names
  become: true

- name: ansible-orchestration | admin-user | Generate an OpenSSL certificate signed with kube CA certificate
  community.crypto.x509_certificate:
    path: "{{ kube_credential_folder }}/kubeadm.crt"
    csr_path: "{{ kube_credential_folder }}/kubeadm.csr"
    ownca_path: "{{ kubernetes_certificates_path }}ca.crt"
    ownca_privatekey_path: "{{ kubernetes_certificates_path }}ca.key"
    provider: ownca
  when:
   - kube_masters_group in group_names
  become: true

- name: ansible-orchestration | admin-user | create admin account
  ansible.builtin.copy:
    src: clusteradministrators.yml
    dest: "/tmp/clusteradministrators.yml"
    owner: root
    group: root
    mode: 0640
  become: true

- name: ansible-orchestration | admin-user | create kubernetes user
  kubernetes.core.k8s:
    state: present
    src: /tmp/clusteradministrators.yml
  when:
   - kube_masters_group in group_names
  failed_when: false
  become: true

- name: ansible-orchestration | admin-user | create admin account
  ansible.builtin.copy:
    src: cluster-administrators-crb.yml
    dest: "/tmp/cluster-administrators-crb.yml"
    owner: root
    group: root
    mode: 0640
  become: true

- name: ansible-orchestration | admin-user | create kubernetes user rights
  kubernetes.core.k8s:
    state: present
    src: /tmp/cluster-administrators-crb.yml
  when:
   - kube_masters_group in group_names
  failed_when: false
  become: true

- name: ansible-orchestration | admin-user | configure kubernetes with credentials
  ansible.builtin.command: "kubectl config set-credentials kubeadm --client-key={{ kube_credential_folder }}/kubeadm.pem --client-certificate={{ kube_credential_folder }}/kubeadm.crt"
  when:
   - kube_masters_group in group_names
  failed_when: false
  changed_when: False
  become: true

- name: ansible-orchestration | admin-user | cat kubernetes admin certificates
  ansible.builtin.slurp:
    src: "{{ kube_credential_folder }}/kubeadm.crt"
  register: key
  when:
   - kube_masters_group in group_names
  become: true

- name: ansible-orchestration | admin-user | cat kubernetes admin certificates
  ansible.builtin.debug:
    msg: "{{ key['content'] | b64decode }}"
  when:
   - kube_masters_group in group_names
  become: true
